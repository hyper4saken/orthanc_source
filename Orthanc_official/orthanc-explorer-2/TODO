For this version:
****************

- delayed-deletion enabled status !


For "soon":
**********

- implement exactmatch (for patient id) + button show all patient studies

- open OHIF viewer with a "?token=1234" to avoid entering credentials when opening OHIF (since it's another server) 
  -> need authorization plugin to check auth 
  -> need API to generate the token (API in OE2 that forwards to ext web-service).
  -> Probably required for MedDream too + required for creating shares in OsimisViewer
  -> for OHIF & MedDream: generate a token valid for 30 minutes

For "later":
***********

- filter by daterange - including date picker (https://vcalendar.io/vue-3.html ?)

- predefined filters in config file to display below Studies:
  - "Today": {"StudyDate": "$today"}
  - "CT Last month": {"ModalitiesInStudy": "CT", "StudyDate": "$oneMonthAgo-"}
    predefined keywords: $today, $yesterday, $oneWeekAgo, $oneMonthAgo, $oneYearAgo


- allow selection of multiple studies/series/instances to perform bulk actions (delete/send-to-peer/send-to-modality)
- show attachments


- allow sharing a link to a study (aka publication link.  Authorisation included in a JWT part of the url - likely with the help of an external web service)


- support multiple languages (https://groups.google.com/g/orthanc-users/c/hiPNVapHygA/m/BJj8lHSDCQAJ)
- support dicom-web plugin (QIDO-RS UI)
- support neuro plugin (download nifti)
- support modification of MainDicomTags via a UI (including anonymization) (add EnableAnonymize in UI options):
  - Config to list the dicom tags to display (possibly all)
  - option to keep the StudyInstanceUID or not
  - option to delete the original data or not
  - option to anonymize or not (if modification is an anonymization, it will remove many tags)

- query-retrieve (DICOM modalities).  Allow multiple search on multiple fields (same fields as in study list)

- TagsTree: allow click on "null" tags to open /instances/../content/group,element in new window

- show job details (need improvement in Orthanc API itself)


For a further version (ideas):
**************
- UI customization:
 - add custom actions per study/series/instances
 - select default viewer
 - configure other viewers url (ex: radiant://?n=pstv&v=0020000D&v=%22StudyInstanceUID%22 or osirix or horos ...)
 - hide/show standard actions -> probably to be handled once user management is implemented
- make table sortable and faster search by maintaining a cache DB (SQLite in each Orthanc instance handled by the oe2 plugin)
  - only for studies.  with a few indexed tags (the ones from the UI table)
  - plugin monitors /changes route to see changes from all orthancs (instead of reacting to change events)
  - to monitor deleted studies, react to change event + call other oe2 plugin API ?  (need to list all orthanc urls somewhere)
  - from OHIF doc for their study list: When the Study List is opened, the application queries the PACS for 101 studies by default. If there are greater than 100 studies    
       returned, the default sort for the study list is dictated by the image archive that hosts these studies for the viewer and study list sorting will be disabled. If there are less than or equal to 100 studies returned, they will be sorted by study date (most recent to oldest) and study list sorting will be enabled. Whenever a query returns greater than 100 studies, use filters to narrow results below 100 studies to enable Study List sorting.


- list last studies received (through DICOM or upload)

For a further version (ideas):
***************

- Q&R on multiple modalities at a same time (select the modalities you want to Q&R and display the modality in the study list)
  (same with Q&R for dicom-web and peers)
- in local study list, display the number of studies that are present on a remote modality for this patient (e.g: a cold archive)
  - Add a button to fetch all these data (todo: find a way to delete them after a while ?)
  - same with dicom-web and peers ?

User & configuration management (ideas + implementation notes):
-------------------------------

- allow Orthanc to store anything in Global Properties.  Maybe not through the API but only through the SDK.
  Or, only for an "admin" user ?

- TBC: allow Orthanc to store the users in DB (like Peers & Modalities).  Except for
  one "admin" user that would be stored in the config file.  Note: In this case, we would need an API to store users.
  Would be nice to have some type of users like: admin, read-only, read-write at API level but that would make more sense
  to have dedicated roles in the oe2 plugin.
  
- User management in oe2 plugin: 
  - CRUD routes for users -> would modify Global properties (need for revisions !).  A single json with all users definition.
    Each CRUD operation only updates a node of the json (that's why we need revisions !).
  - implement authorization checks at API level for all routes (deny all and handle all known routes, including known plugins route)
  - a user could save its prefered searches in its user-settings (to be stored in global properties too)
  - implement a "login page" instead of the brwoser login dialog -> some routes must be accessible for everyone -> check if compatible with Orthanc Core

- Edit configuration through the oe2 UI:
  - Some immutable configuration in a config file:
    - DB + storage
    - Admin user !
    - HttpPort
  - Check if we could store a config in Global Properties (probably too early in the Orthanc init process).  We would merge the file config with the config in DB
  - Otherwise, store the config in a file and restart Orthanc 
    -> in Windows Service: how to tell Orthanc to use another config file ?
    -> would be nice to have a SDK route to implement /tools/reboot with a given config file
  - Could be a combination of 2:
    - start Orthanc with config from file
    - plugin reads the config in DB, generates a tmp config file -> /tools/reboot with this file
    - that's a bit "shaky" since each cold start is made of 2 starts

Ideas bag:
*********

- allow users to choose the columns in the interface (store in browser LocalStorage ?)
- browse orthanc peer (probably need to extend the Orthanc API to avoid CORS issues)
- show statistics/event logs: e.g: would be nice to see how many instances
  have been received recently (from where)


